const fs = require('fs');
const path = require('path');

const filePath = path.join(__dirname, '../songs/deep_last_teen.json'); // 상대 경로 사용

try {
  let rawData = fs.readFileSync(filePath, 'utf-8');
  let data = JSON.parse(rawData);
  let changesMade = 0;

  data.translatedLines.forEach(item => {
    // 1. 果てることはなく -> 끝없이 (또는 문맥에 따라 다른 자연스러운 표현)
    if (item.T0 === "果てることはなく" && item.K0 === "끝나는 일은 없이") {
      item.K0 = "끝없이 이어지고";
      changesMade++;
    }

    // 2. もしもずっとずっと子供でいられたら -> 만약 계속, 계속 아이로 있을 수 있다면 (쉼표 추가)
    if (item.T0 === "もしもずっとずっと子供でいられたら" && item.K0 === "만약 계속 계속 아이로 있을 수 있었다면") {
      item.K0 = "만약 계속, 계속 아이로 있을 수 있었다면";
      changesMade++;
    }

    // 3. いつからで -> 언제부터였을까 (문맥에 맞게 수정)
    if (item.T0 === "いつからで" && item.K0 === "언제부터이고") {
      item.K0 = "언제부터였을까";
      changesMade++;
    }

    // 4. もうすぐ果たすんだね。 -> 이제 곧 끝나는 거겠지. ("果たす"의 문맥적 의미 반영)
    // 또는 "이제 곧 다 채우는 거겠지." (나이의 의미로 해석) - 여기서는 '끝나다'로 우선 수정
    if (item.T0 === "もうすぐ果たすんだね。" && item.K0 === "곧 이루어질 거야.") {
      item.K0 = "이제 곧 끝나는 거겠지.";
      changesMade++;
    }
    
    // 5. どうかずっとずっと私のままでいたい -> 부디 계속, 계속 나인 채로 있고 싶어 (쉼표, 어미 수정)
    if (item.T0 === "どうかずっとずっと私のままでいたい" && item.K0 === "제발 계속 계속 나 그대로 있어줬으면 좋겠어.") {
      item.K0 = "부디 계속, 계속 나인 채로 있고 싶어.";
      changesMade++;
    }

    // 6. 大盛りは頼まないこと -> 곱빼기는 시키지 않는 것
    if (item.T0 === "大盛りは頼まないこと" && item.K0 === "대량 주문은 부탁하지 않는 것.") {
      item.K0 = "곱빼기는 시키지 않는 것";
      changesMade++;
    }

    // 7. はたちって手足の指で数えて -> 스무 살이란 건 손발가락으로 다 세어서 (다음 가사와 자연스럽게 이어지도록)
    if (item.T0 === "はたちって手足の指で数えて" && item.K0 === "스무 살은 손발의 손가락으로 세어보라") {
      item.K0 = "스무 살이란 건 손발가락으로 다 세어서";
      changesMade++;
    }
    
    // 8. 私はまだ左足小指が残ってるけど -> 나는 아직 왼발 새끼발가락 하나가 남았지만 (좀 더 구체적으로)
    if (item.T0 === "私はまだ左足小指が残ってるけど" && item.K0 === "나는 아직 왼발 새끼손가락이 남아 있지만") {
        item.K0 = "나는 아직 왼발 새끼발가락 하나가 남았지만";
        changesMade++;
    }

    // 9. どうかずっとずっと貴方のままでいて -> 부디 계속, 계속 당신인 채로 있어줘.
    if (item.T0 === "どうかずっとずっと貴方のままでいて" && item.K0 === "제발 계속 계속 당신 그대로 있어줘.") {
      item.K0 = "부디 계속, 계속 당신인 채로 있어줘.";
      changesMade++;
    }

    // 10. 周りの人に頼れないこと -> 주변 사람들에게 기댈 수 없는 것 (더 자연스러운 표현)
    if (item.T0 === "周りの人に頼れないこと" && item.K0 === "주변 사람들에게 의지할 수 없는 것.") {
      item.K0 = "주변 사람들에게 기댈 수 없는 것";
      changesMade++;
    }
    
    // 11. 誰かを怒らせちゃうこと -> 누군가를 화나게 만들어 버리는 것
    if (item.T0 === "誰かを怒らせちゃうこと" && item.K0 === "누군가를 화나게 해버리는 것") {
        item.K0 = "누군가를 화나게 만들어 버리는 것";
        changesMade++;
    }

    // 12. 人は変わっちゃうから。 -> 사람은 변해 버리니까. (마침표 일관성)
    if (item.T0 === "人は変わっちゃうから。" && item.K0 === "사람은 변해 버리니까.") {
        // K0 값 동일, 변경 없음. 다만, 마침표 확인차원에서 둠.
    }
    
    // 13. 果てることなんかない。 -> 끝나는 것 따윈 없어. (마침표 일관성 및 어투)
    if (item.T0 === "果てることなんかない。" && item.K0 === "끝나는 건 없어.") {
        item.K0 = "끝나는 것 따윈 없어.";
        changesMade++;
    }
    
    // 14. 変わってもいいの、 -> 변해도 괜찮아, (마침표 제거 및 쉼표 유지)
    // 이 경우는 이미 K0가 "변해도 괜찮아," 로 되어 있을 가능성도 있음. 확인 필요.
    // 현재 K0: "변해도 괜찮아," - 변경 없음.
    
    // 15. 誰かの何かになれる、 -> 누군가의 무언가가 될 수 있어, (마침표 제거 및 쉼표 유지)
    // 현재 K0: "누군가의 무언가가 될 수 있어," - 변경 없음.

  });

  if (changesMade > 0) {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf-8');
    console.log(`파일 수정 완료: ${filePath} (${changesMade}개 항목 수정됨)`);
  } else {
    console.log("수정된 항목이 없습니다.");
  }

} catch (error) {
  console.error('스크립트 실행 중 오류 발생:', error);
} 