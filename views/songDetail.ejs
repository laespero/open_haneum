<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= song.kor_name || song.name %> - 번역 관리</title>
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
    <link rel="manifest" href="/favicon/site.webmanifest">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    
    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/dialog/dialog.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/theme/dracula.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/lint/lint.css">

    <style>
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .tab-button.active { 
            border-color: #3b82f6; /* blue-500 */
            color: #2563eb; /* blue-600 */
            background-color: #eff6ff; /* blue-50 */
        }
        /* CodeMirror custom styles */
        .CodeMirror {
            flex-grow: 1;
            border: 1px solid #d1d5db; /* gray-300 */
            border-radius: 0.5rem; /* rounded-lg */
        }
        .CodeMirror-wrap pre.CodeMirror-line, .CodeMirror-wrap pre.CodeMirror-line-like {
            word-break: break-all;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 font-sans">
    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            // 페이지가 로드될 때 세션 스토리지에서 스크롤 위치를 읽어옵니다.
            const scrollpos = sessionStorage.getItem('scrollpos');
            if (scrollpos) {
                window.scrollTo(0, parseInt(scrollpos, 10));
                sessionStorage.removeItem('scrollpos'); // 사용 후에는 제거합니다.
            }

            // 페이지의 모든 폼에 이벤트 리스너를 추가합니다.
            document.querySelectorAll('form').forEach(form => {
                form.addEventListener('submit', () => {
                    // 폼이 제출되기 직전에 현재 스크롤 위치를 세션 스토리지에 저장합니다.
                    sessionStorage.setItem('scrollpos', window.scrollY);
                });
            });
        });
    </script>
    <!-- 헤더 -->
    <header class="bg-white shadow-sm sticky top-0 z-50">
        <div class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <a href="/" class="text-2xl font-bold text-blue-600">Haneum</a>
                <nav class="hidden md:flex items-center gap-6">
                    <a href="/add-song" class="text-gray-600 hover:text-blue-600 transition-colors">노래 추가</a>
                    <a href="/songs" class="text-gray-600 hover:text-blue-600 transition-colors">노래 목록</a>
                </nav>
            </div>
        </div>
    </header>

    <main class="container mx-auto max-w-5xl px-4 sm:px-6 lg:px-8 py-12">
        <!-- 노래 정보 및 주요 액션 -->
        <div class="bg-white p-6 rounded-2xl shadow-lg mb-8">
            <div class="flex flex-col md:flex-row justify-between items-start gap-4">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900"><%= song.name %></h1>
                    <p class="text-lg text-gray-500 mt-1"><%= typeof song.artist === 'object' ? song.artist.ori_name : song.artist %></p>
                    <div class="flex gap-2 text-sm text-gray-400 mt-2">
                        <span><%= song.ori_name %></span> / <span><%= song.kor_name %></span> / <span><%= song.eng_name %></span>
                    </div>
                    <% if (song.tags && song.tags.length > 0) { %>
                        <div class="flex flex-wrap gap-2 mt-4">
                            <% song.tags.forEach(tag => { %>
                                <span class="bg-gray-200 text-gray-700 text-xs font-semibold px-2.5 py-0.5 rounded-full"><%= tag %></span>
                            <% }); %>
                        </div>
                    <% } %>
                </div>
                <div class="flex flex-wrap gap-2 mt-4 md:mt-0">
                    <% if (!song.translatedLines || song.translatedLines.length === 0) { %>
                        <form action="/translate/<%= song.name %>" method="post" class="disable-on-submit">
                            <button type="submit" data-processing-text="번역중..." class="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition font-semibold">
                                <i class="fas fa-language"></i> 번역하기
                            </button>
                        </form>
                    <% } %>
                     <a href="/view/<%= song.name %>" class="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition font-semibold">
                        <i class="fas fa-eye"></i> 완성본 보기
                    </a>
                    <button id="edit-button" class="flex items-center gap-2 bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition font-semibold">
                        <i class="fas fa-edit"></i> 정보 수정
                    </button>
                </div>
            </div>
        </div>

        <!-- 수정 모달 -->
        <div id="edit-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center hidden z-50">
            <div class="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md">
                <h2 class="text-2xl font-bold mb-6">정보 수정</h2>
                <form action="/update-song-meta/<%= song.name %>" method="post">
                    <div class="space-y-4">
                        <div>
                            <label for="ori_name" class="block text-sm font-medium text-gray-700">노래 원어명</label>
                            <input type="text" id="ori_name" name="ori_name" value="<%= song.ori_name %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                        <div>
                            <label for="kor_name" class="block text-sm font-medium text-gray-700">노래 한국어명</label>
                            <input type="text" id="kor_name" name="kor_name" value="<%= song.kor_name %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                        <div>
                            <label for="eng_name" class="block text-sm font-medium text-gray-700">노래 영어명</label>
                            <input type="text" id="eng_name" name="eng_name" value="<%= song.eng_name %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                        <div>
                            <label for="artist_ori_name" class="block text-sm font-medium text-gray-700">아티스트 원어명</label>
                            <input type="text" id="artist_ori_name" name="artist_ori_name" value="<%= typeof song.artist === 'object' ? song.artist.ori_name : song.artist %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                        <div>
                            <label for="artist_kor_name" class="block text-sm font-medium text-gray-700">아티스트 한국어명</label>
                            <input type="text" id="artist_kor_name" name="artist_kor_name" value="<%= typeof song.artist === 'object' ? song.artist.kor_name : '' %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                        <div>
                            <label for="artist_eng_name" class="block text-sm font-medium text-gray-700">아티스트 영어명</label>
                            <input type="text" id="artist_eng_name" name="artist_eng_name" value="<%= typeof song.artist === 'object' ? song.artist.eng_name : '' %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                        <div>
                            <label for="tags" class="block text-sm font-medium text-gray-700">태그 (쉼표로 구분)</label>
                            <input type="text" id="tags" name="tags" value="<%= song.tags ? song.tags.join(', ') : '' %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                        <div>
                            <label for="vid" class="block text-sm font-medium text-gray-700">유튜브 영상 ID (11자리)</label>
                            <input type="text" id="vid" name="vid" value="<%= song.vid %>"
                                   class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition">
                        </div>
                    </div>
                    <div class="mt-8 flex justify-end gap-3">
                        <button type="button" id="close-modal-button" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition font-semibold">취소</button>
                        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition font-semibold">저장하기</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- JSON 수정 모달 -->
        <div id="json-edit-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-75 flex justify-center items-center z-50 opacity-0 transition-opacity duration-300 p-4 sm:p-8">
            <div class="bg-white rounded-2xl shadow-xl w-full h-full flex flex-col transform transition-all duration-300 scale-95">
                <div class="flex justify-between items-center p-6 border-b border-gray-200 flex-shrink-0">
                    <h2 class="text-2xl font-bold">가사 라인 JSON 수정</h2>
                    <button id="close-json-modal-button" class="text-gray-400 hover:text-gray-600 transition-colors">
                        <i class="fas fa-times fa-lg"></i>
                    </button>
                </div>
                <form id="json-edit-form" action="" method="post" class="disable-on-submit flex-grow flex flex-col p-6">
                    <input type="hidden" name="originalLine" id="json-edit-original-line">
                    <div class="flex-grow flex flex-col min-h-0">
                        <label for="json-content" class="block text-sm font-medium text-gray-700 mb-2 flex-shrink-0">JSON 데이터 (Ctrl+F 로 검색)</label>
                        <textarea id="json-content" name="jsonContent"
                                  class="w-full flex-grow px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition font-mono text-sm bg-gray-50"></textarea>
                        <div id="schema-validation-errors" class="text-xs text-red-500 mt-2 font-mono whitespace-pre-wrap"></div>
                    </div>
                    <div class="mt-6 flex justify-end gap-3 flex-shrink-0">
                        <button type="button" id="cancel-json-modal-button" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition font-semibold">취소</button>
                        <button type="submit" id="json-save-button" data-processing-text="저장중..." class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition font-semibold">저장하기</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- 탭 네비게이션 -->
        <div class="mb-6">
            <div class="border-b border-gray-200">
                <nav class="-mb-px flex space-x-6" aria-label="Tabs">
                    <button class="tab-button active" data-tab="translated">번역된 가사 (<%= song.translatedLines ? song.translatedLines.length : 0 %>)</button>
                    <button class="tab-button" data-tab="processed-lyrics">작업용 가사 (<%= song.p1 ? song.p1.length : 0 %>)</button>
                    <button class="tab-button" data-tab="full-lyrics">원본 가사</button>
                    <% if (Array.isArray(song.failedLines) && song.failedLines.length > 0) { %>
                        <button class="tab-button text-red-600" data-tab="failed">번역 실패 (<%= song.failedLines.length %>)</button>
                    <% } %>
                </nav>
            </div>
        </div>

        <!-- 탭 컨텐츠 -->
        <div id="tab-contents">
            <!-- 번역된 가사 -->
            <div id="tab-translated" class="tab-content active space-y-4">
                <% if (Array.isArray(song.translatedLines) && song.translatedLines.length > 0) { %>
                    <% song.p1.forEach(function(originalLine) { 
                        const translation = song.translatedLines.find(t => t.T0 === originalLine || t.O0 === originalLine);
                        if (!translation) return; // 번역이 없는 경우 렌더링 스킵
                    %>
                        <div class="bg-white rounded-xl shadow-md p-5 border border-gray-200 hover:border-blue-400 transition">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6">
                                <div class="space-y-1">
                                    <div class="text-green-700 font-semibold break-words"><%= translation.R0 %></div>
                                    <div class="text-gray-800 font-semibold break-words"><%= translation.T0 %></div>
                                    <div class="text-blue-700 font-semibold break-words"><%= translation.K0 %></div>
                                </div>
                                <div class="space-y-1">
                                    <div class="text-green-700 font-semibold break-words"><%= translation.LI.flat().map(x=>x.R1).join(' ') %></div>
                                    <div class="text-gray-800 font-semibold break-words"><%= translation.LI.flat().map(x=>x.T1).join(' ') %></div>
                                    <div class="text-blue-700 font-semibold break-words"><%= translation.LI.flat().map(x=>x.K1).join(' ') %></div>
                                </div>
                            </div>
                            <div class="mt-4 pt-4 border-t border-gray-200 flex flex-wrap items-center gap-2">
                                <form class="retry-form disable-on-submit flex-shrink-0" action="/retry-line/<%= song.name %>" method="post">
                                    <input type="hidden" name="originalLine" value="<%= originalLine %>">
                                    <button type="submit" data-processing-text="재번역중..." class="text-xs bg-green-100 text-green-700 hover:bg-green-200 px-3 py-1 rounded-full font-medium transition">재번역</button>
                                </form>
                                <form class="correct-with-message disable-on-submit flex-grow" action="/correct-with-message/<%= song.name %>" method="post">
                                    <div class="flex gap-2">
                                        <input type="hidden" name="originalLine" value="<%= originalLine %>">
                                        <input name="correctionMessage" placeholder="수정 요청 메시지..." class="flex-grow text-xs w-full px-3 py-1 border border-gray-300 rounded-full focus:ring-1 focus:ring-blue-500 focus:border-blue-500"/>
                                        <button type="submit" data-processing-text="수정중..." class="text-xs bg-blue-100 text-blue-700 hover:bg-blue-200 px-3 py-1 rounded-full font-medium transition flex-shrink-0">요청</button>
                                    </div>
                                </form>
                                <button class="edit-json-button text-xs bg-yellow-100 text-yellow-700 hover:bg-yellow-200 px-3 py-1 rounded-full font-medium transition"
                                        data-original-line="<%= originalLine %>"
                                        data-translation="<%- JSON.stringify(translation).replace(/\"/g, '&quot;') %>">
                                    <i class="fas fa-code"></i> 직접 수정
                                </button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="text-center py-12 bg-white rounded-xl shadow-md">
                        <i class="fas fa-info-circle text-4xl text-gray-400 mb-4"></i>
                        <p class="text-gray-500">아직 번역된 내용이 없습니다.</p>
                        <p class="text-sm text-gray-400 mt-1">상단의 '번역하기' 버튼을 눌러 작업을 시작하세요.</p>
                    </div>
                <% } %>
            </div>

            <!-- 작업용 가사 -->
            <div id="tab-processed-lyrics" class="tab-content">
                <div class="bg-white rounded-xl shadow-md p-6">
                    <% if (Array.isArray(song.p1) && song.p1.length > 0) { %>
                        <ul class="space-y-2 font-mono text-sm">
                            <% song.p1.forEach(function(line) { %>
                                <li class="text-gray-700 border-b border-gray-100 py-1"><%= line %></li>
                            <% }); %>
                        </ul>
                    <% } else { %>
                        <p class="text-gray-500">처리된 가사가 없습니다.</p>
                    <% } %>
                </div>
            </div>

            <!-- 전체 가사 -->
            <div id="tab-full-lyrics" class="tab-content">
                <div class="bg-white rounded-xl shadow-md p-6">
                    <pre class="whitespace-pre-wrap text-sm text-gray-700 leading-relaxed"><%= song.text %></pre>
                </div>
            </div>
            
            <!-- 번역 실패 -->
            <% if (Array.isArray(song.failedLines) && song.failedLines.length > 0) { %>
                <div id="tab-failed" class="tab-content">
                    <div class="bg-red-50 border-l-4 border-red-400 p-6 rounded-r-lg">
                        <h3 class="text-lg font-semibold text-red-800 mb-4">번역에 실패한 문장들</h3>
                        <ul class="space-y-2 mb-4 text-sm">
                            <% song.failedLines.forEach(function(context) { %>
                                <li class="text-red-700 font-mono bg-red-100 p-2 rounded"><%= JSON.stringify(context) %></li>
                            <% }); %>
                        </ul>
                        <form action="/retry-translation/<%= song.name %>" method="post" class="disable-on-submit">
                            <button type="submit" data-processing-text="재번역중..." class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition font-semibold">
                                실패한 문장 모두 재번역
                            </button>
                        </form>
                    </div>
                </div>
            <% } %>
        </div>
    </main>

    <!-- CodeMirror JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/edit/matchbrackets.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/edit/closebrackets.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/search/search.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/search/searchcursor.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/search/jump-to-line.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/dialog/dialog.js"></script>
    <!-- JSON Linting -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/lint/lint.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/lint/json-lint.js"></script>    
    
    <script>
        // 폼 제출 시 버튼 비활성화
        document.querySelectorAll('.disable-on-submit').forEach(form => {
            form.addEventListener('submit', function(event) {
                const button = form.querySelector('button[type="submit"]');
                if (button) {
                    button.disabled = true;
                    const processingText = button.getAttribute('data-processing-text') || '처리중...';
                    button.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${processingText}`;
                    button.classList.add('opacity-70', 'cursor-wait');
                }
            });
        });

        // 탭 기능
        const tabButtons = document.querySelectorAll('.tab-button');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabButtons.forEach(button => {
            // 기본 스타일 설정
            button.classList.add('py-2', 'px-4', 'border-b-2', 'border-transparent', 'text-sm', 'font-medium', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300', 'transition-colors');
            
            button.addEventListener('click', () => {
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                tabContents.forEach(content => content.classList.remove('active'));
                const tabId = button.getAttribute('data-tab');
                document.getElementById(`tab-${tabId}`).classList.add('active');
            });
        });

        // 모달 제어
        const editButton = document.getElementById('edit-button');
        const modal = document.getElementById('edit-modal');
        const closeModalButton = document.getElementById('close-modal-button');

        editButton.addEventListener('click', () => {
            modal.classList.remove('hidden');
        });

        closeModalButton.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        // 모달 외부 클릭 시 닫기
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
            }
        });

        // JSON 수정 모달 제어
        const jsonEditModal = document.getElementById('json-edit-modal');
        let jsonEditor = null; // CodeMirror 인스턴스를 담을 변수

        if (jsonEditModal) {
            const jsonEditModalContent = jsonEditModal.querySelector('.w-full');
            const jsonEditForm = document.getElementById('json-edit-form');
            const jsonEditOriginalLineInput = document.getElementById('json-edit-original-line');
            const jsonContentTextarea = document.getElementById('json-content');
            const closeJsonModalButtons = [document.getElementById('close-json-modal-button'), document.getElementById('cancel-json-modal-button')];
            const jsonSaveButton = document.getElementById('json-save-button');
            const schemaValidationErrors = document.getElementById('schema-validation-errors');

            // 1. 직접 스키마를 검증하는 함수
            function validateSchema(data) {
                const errors = [];
                const rootRequired = ["T0", "C0", "G0", "K0", "I0", "R0", "LI"];
                const liRequired = [
                    "T1", "K1", "I1", "R1", "E1",
                    "T2", "K2", "I2", "R2",
                    "XE", "XK", "XI", "XR"
                ];

                if (typeof data !== 'object' || data === null) {
                    return { isValid: false, errors: ["- 최상위 데이터는 객체여야 합니다."] };
                }

                for (const key of rootRequired) {
                    if (!(key in data)) {
                        errors.push(`- 최상위 필수 필드 '${key}'가 없습니다.`);
                    }
                }

                if ('T0' in data && (typeof data.T0 !== 'string' || data.T0.length === 0)) {
                    errors.push("- 'T0'는 비어 있지 않은 문자열이어야 합니다.");
                }
                
                const stringKeys = ["C0", "G0", "K0", "I0", "R0"];
                for(const key of stringKeys) {
                    if(key in data && typeof data[key] !== 'string') {
                        errors.push(`- '${key}'는 문자열이어야 합니다.`);
                    }
                }

                if (!('LI' in data) || !Array.isArray(data.LI)) {
                    errors.push("- 'LI'는 배열이어야 합니다.");
                } else {
                    data.LI.forEach((item, index) => {
                        if (typeof item !== 'object' || item === null) {
                            errors.push(`- LI[${index}] 항목은 객체여야 합니다.`);
                            return; // 다음 항목으로
                        }
                        for (const key of liRequired) {
                            if (!(key in item)) {
                                errors.push(`- LI[${index}]에 필수 필드 '${key}'가 없습니다.`);
                            } else if (typeof item[key] !== 'string') {
                                errors.push(`- LI[${index}].${key}는 문자열이어야 합니다.`);
                            }
                        }
                    });
                }

                return {
                    isValid: errors.length === 0,
                    errors: errors
                };
            }

            document.querySelectorAll('.edit-json-button').forEach(button => {
                button.addEventListener('click', () => {
                    const originalLine = button.dataset.originalLine;
                    // HTML dataset 속성은 자동으로 엔티티를 디코딩하므로, 추가적인 replace 없이 바로 파싱합니다.
                    const translationData = JSON.parse(button.dataset.translation);

                    jsonEditForm.action = `/update-line/<%= song.name %>`;
                    jsonEditOriginalLineInput.value = originalLine;

                    jsonEditModal.classList.remove('hidden');
                    setTimeout(() => {
                        jsonEditModal.classList.add('opacity-100');
                        jsonEditModalContent.classList.remove('scale-95');

                        if (!jsonEditor) {
                            jsonEditor = CodeMirror.fromTextArea(jsonContentTextarea, {
                                lineNumbers: true,
                                mode: { name: "javascript", json: true },
                                theme: "dracula",
                                matchBrackets: true,
                                autoCloseBrackets: true,
                                lineWrapping: true,
                                gutters: ["CodeMirror-lint-markers"],
                                lint: {
                                    onUpdateLinting: (annotations, allAnnotations, cm) => {
                                        const hasSyntaxErrors = annotations.length > 0;

                                        if (hasSyntaxErrors) {
                                            // Linter가 문법 오류를 표시하고 있으므로, 저장 버튼을 비활성화하고
                                            // 하단의 커스텀 스키마 오류 메시지는 비웁니다.
                                            jsonSaveButton.disabled = true;
                                            jsonSaveButton.classList.add('opacity-50', 'cursor-not-allowed');
                                            schemaValidationErrors.textContent = '';
                                            return;
                                        }

                                        // 문법이 올바르므로, 이제 직접 만든 스키마를 검증합니다.
                                        try {
                                            const content = cm.getValue();
                                            const data = JSON.parse(content);
                                            const validationResult = validateSchema(data);
                                            
                                            if (validationResult.isValid) {
                                                jsonSaveButton.disabled = false;
                                                jsonSaveButton.classList.remove('opacity-50', 'cursor-not-allowed');
                                                schemaValidationErrors.textContent = '';
                                            } else {
                                                jsonSaveButton.disabled = true;
                                                jsonSaveButton.classList.add('opacity-50', 'cursor-not-allowed');
                                                schemaValidationErrors.textContent = "스키마 오류:\n" + validationResult.errors.join('\n');
                                            }
                                        } catch (e) {
                                            // 이 경우는 거의 없지만, 만약을 대비해 처리합니다.
                                            console.error("An unexpected error occurred during schema validation:", e); // 디버깅을 위해 에러를 콘솔에 출력
                                            jsonSaveButton.disabled = true;
                                            jsonSaveButton.classList.add('opacity-50', 'cursor-not-allowed');
                                            schemaValidationErrors.textContent = '데이터 처리 중 오류가 발생했습니다. (개발자 콘솔에서 상세 정보 확인)';
                                        }
                                    }
                                }
                            });
                        }
                        
                        jsonEditor.setValue(JSON.stringify(translationData, null, 2));
                        jsonEditor.clearHistory(); // 히스토리의 시작점을 현재 내용으로 설정하여 빈 문자열로 돌아가는 것을 방지

                        setTimeout(() => {
                            jsonEditor.refresh();
                            jsonEditor.focus();
                            jsonEditor.performLint(); // 모달이 열릴 때 수동으로 Linter를 실행합니다.
                        }, 50);

                    }, 10);
                });
            });

            jsonEditForm.addEventListener('submit', (event) => {
                if (jsonEditor) {
                    const content = jsonEditor.getValue();
                    let data;
                    try {
                        data = JSON.parse(content);
                    } catch (e) {
                        event.preventDefault(); // 폼 제출 중단
                        alert('JSON 문법 오류: ' + e.message);
                        return;
                    }
                    
                    const validationResult = validateSchema(data);
                    if (!validationResult.isValid) {
                        event.preventDefault();
                        alert('JSON 스키마 오류. 수정한 내용이 스키마에 맞지 않습니다.\n\n오류 내용:\n' + validationResult.errors.join('\n'));
                        return;
                    }
                    
                    jsonEditor.save(); // 에디터의 내용을 textarea에 저장
                }
            });

            function closeJsonEditModal() {
                jsonEditModal.classList.remove('opacity-100');
                jsonEditModalContent.classList.add('scale-95');
                setTimeout(() => {
                    jsonEditModal.classList.add('hidden');
                }, 300);
            }

            closeJsonModalButtons.forEach(btn => btn.addEventListener('click', closeJsonEditModal));

            jsonEditModal.addEventListener('click', (e) => {
                if (e.target === jsonEditModal) {
                    closeJsonEditModal();
                }
            });
        }
    </script>
</body>
</html>
